
import logging
import json
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, 
    CommandHandler, 
    MessageHandler, 
    Filters, 
    CallbackContext, 
    ConversationHandler,
    CallbackQueryHandler
)
# –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Railway - –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Workout Bot is running!"

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import BOT_TOKEN, TRAINING_PROGRAMS
except ImportError:
    # –ï—Å–ª–∏ config.py –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import os
    from dotenv import load_dotenv
    load_dotenv()
    
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    TRAINING_PROGRAMS = {
        "–î–µ–Ω—å –ê": {
            "description": "üèãÔ∏è –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∏–º—ã –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏",
            "exercises": [
                "–ñ–∏–º –Ω–æ–≥–∞–º–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (4x8-12)",
                "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º (3x–¥–æ –æ—Ç–∫–∞–∑–∞)",
                "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∫–∞–º—å–µ (4x6-10)", 
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è (3x8-12)",
                "–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å (3x10-12)",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –Ω–∞ –±–ª–æ–∫–µ (–∫–∞–Ω–∞—Ç) (3x12-15)",
                "–ü–æ–¥—ä–µ–º –Ω–æ–≥ –≤ –≤–∏—Å–µ (3x12-15)"
            ]
        },
        "–î–µ–Ω—å –ë": {
            "description": "üí™ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∏–º—ã –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏", 
            "exercises": [
                "–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ —Å–æ —à—Ç–∞–Ω–≥–æ–π (4x10-12)",
                "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ (4x8-12)",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ (30¬∞) (4x10-12)",
                "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º (3x10-15)",
                "–ü–æ–¥—ä–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å —Å–∏–¥—è (3x10-12)",
                "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º –ª–µ–∂–∞ (EZ-–≥—Ä–∏—Ñ) (3x10-12)",
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Ä–∏–º—Å–∫–æ–º —Å—Ç—É–ª–µ (3x15-20)"
            ]
        }
    }

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_DAY, CHOOSING_EXERCISE, ENTERING_EXERCISE_DATA = range(3)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'user_data.json'

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, Exception) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_exercise_keyboard(day, completed_exercises):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    exercises = TRAINING_PROGRAMS[day]['exercises']
    keyboard = []
    
    for i, exercise in enumerate(exercises):
        status = "‚úÖ" if i in completed_exercises else "‚óªÔ∏è"
        keyboard.append([InlineKeyboardButton(f"{status} {i+1}. {exercise}", callback_data=f"ex_{i}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")])
    keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish")])
    
    return InlineKeyboardMarkup(keyboard)

def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user = update.effective_user
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ñ—É–ª–ª–±–∞–¥–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/train - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –í–∏–¥–µ—Ç—å –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–Ω—è
‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å –ª—é–±–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
    """
    update.message.reply_text(welcome_text)
    return CHOOSING_DAY

def start_training_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /train - –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    return choose_training_day(update, context)

def choose_training_day(update: Update, context: CallbackContext):
    """–í—ã–±–æ—Ä –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = [
        ["–î–µ–Ω—å –ê", "–î–µ–Ω—å –ë"],
        ["/cancel"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        one_time_keyboard=True,
        resize_keyboard=True
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º
    programs_info = "üìã <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n\n"
    
    for day, program in TRAINING_PROGRAMS.items():
        programs_info += f"<b>{day}</b>\n"
        programs_info += f"{program['description']}\n"
        programs_info += f"<i>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(program['exercises'])}</i>\n\n"
    
    programs_info += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
    
    update.message.reply_text(
        programs_info,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return CHOOSING_DAY

def show_exercise_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""
    if update.message:
        day = update.message.text
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback, –±–µ—Ä–µ–º –¥–µ–Ω—å –∏–∑ context
        day = context.user_data.get('current_day')
    
    user_id = str(update.effective_user.id)
    
    if day not in TRAINING_PROGRAMS:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=ReplyKeyboardRemove()
        )
        return choose_training_day(update, context)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_user_data()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'username': update.effective_user.first_name,
            'history': []
        }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    context.user_data['current_day'] = day
    user_data[user_id]['current_session'] = {
        'day': day,
        'exercises': [],
        'start_time': datetime.now().isoformat()
    }
    
    save_user_data(user_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    program = TRAINING_PROGRAMS[day]
    exercises = program['exercises']
    
    exercises_list = "üìù <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>\n\n"
    for i, exercise in enumerate(exercises, 1):
        exercises_list += f"{i}. {exercise}\n"
    
    exercises_list += f"\n–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}\n\n"
    exercises_list += "üëá –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    completed_exercises = user_data[user_id]['current_session'].get('completed_exercises', [])
    reply_markup = get_exercise_keyboard(day, completed_exercises)
    
    if update.message:
        update.message.reply_text(
            exercises_list,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        
        update.message.reply_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        update.callback_query.edit_message_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    return CHOOSING_EXERCISE

def handle_exercise_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    user_id = str(update.effective_user.id)
    data = query.data
    
    if data == "progress":
        return show_current_progress(update, context)
    elif data == "finish":
        return finish_training_session(update, context)
    elif data.startswith("ex_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_index = int(data.split("_")[1])
        context.user_data['current_exercise'] = exercise_index
        
        day = context.user_data.get('current_day')
        exercises = TRAINING_PROGRAMS[day]['exercises']
        exercise_name = exercises[exercise_index]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        query.edit_message_text(
            f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:\n"
            f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            parse_mode='HTML'
        )
        
        return ENTERING_EXERCISE_DATA

def handle_exercise_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        update.message.reply_text(
            "‚ùå –°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /train"
        )
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    exercise_index = context.user_data.get('current_exercise')
    exercises_list = TRAINING_PROGRAMS[day]['exercises']
    exercise_name = exercises_list[exercise_index]
    
    # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
    try:
        parts = text.split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞")
        
        weight = float(parts[0])
        reps = int(parts[1])
        
        if weight <= 0 or reps <= 0:
            raise ValueError("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            
    except ValueError as e:
        update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code> –∏–ª–∏ <code>32.5 8</code>",
            parse_mode='HTML'
        )
        return ENTERING_EXERCISE_DATA
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_data = {
        'name': exercise_name,
        'weight': weight,
        'reps': reps,
        'timestamp': datetime.now().isoformat()
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    existing_index = None
    for i, ex in enumerate(current_session['exercises']):
        if ex['name'] == exercise_name:
            existing_index = i
            break
    
    if existing_index is not None:
        current_session['exercises'][existing_index] = exercise_data
    else:
        current_session['exercises'].append(exercise_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if 'completed_exercises' not in current_session:
        current_session['completed_exercises'] = []
    
    if exercise_index not in current_session['completed_exercises']:
        current_session['completed_exercises'].append(exercise_index)
    
    save_user_data(user_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    update.message.reply_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {exercise_name}\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {weight}–∫–≥ √ó {reps}–ø–æ–≤—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:"
    )
    
    return show_exercise_list_after_input(update, context)

def skip_exercise(update: Update, context: CallbackContext):
    """–ü—Ä–æ–ø—É—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        update.message.reply_text(
            "‚ùå –°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /train"
        )
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    exercise_index = context.user_data.get('current_exercise')
    exercises_list = TRAINING_PROGRAMS[day]['exercises']
    exercise_name = exercises_list[exercise_index]
    
    update.message.reply_text(
        f"‚è≠Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {exercise_name}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ–∑–∂–µ."
    )
    
    return show_exercise_list_after_input(update, context)

def show_exercise_list_after_input(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    day = context.user_data.get('current_day')
    
    if user_id in user_data and 'current_session' in user_data[user_id]:
        completed_exercises = user_data[user_id]['current_session'].get('completed_exercises', [])
    else:
        completed_exercises = []
    
    reply_markup = get_exercise_keyboard(day, completed_exercises)
    
    update.message.reply_text(
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return CHOOSING_EXERCISE

def show_current_progress(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        if update.callback_query:
            update.callback_query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return CHOOSING_EXERCISE
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    
    progress_text = f"üìä <b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ({day}):</b>\n\n"
    
    if current_session['exercises']:
        for i, exercise in enumerate(current_session['exercises'], 1):
            progress_text += f"{i}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
    else:
        progress_text += "–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
    total_exercises = len(TRAINING_PROGRAMS[day]['exercises'])
    completed_count = len(current_session['exercises'])
    progress_text += f"\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_exercises}"
    
    if update.callback_query:
        update.callback_query.message.reply_text(progress_text, parse_mode='HTML')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        completed_exercises = current_session.get('completed_exercises', [])
        reply_markup = get_exercise_keyboard(day, completed_exercises)
        update.callback_query.message.reply_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    return CHOOSING_EXERCISE

def finish_training_session(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        if update.callback_query:
            update.callback_query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if not current_session['exercises']:
        if update.callback_query:
            update.callback_query.message.reply_text(
                "‚ùå –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é
        del user_data[user_id]['current_session']
        save_user_data(user_data)
        return ConversationHandler.END
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_data[user_id]['history'].append(current_session)
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    del user_data[user_id]['current_session']
    
    save_user_data(user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary = "üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n<b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
    
    for i, exercise in enumerate(current_session['exercises'], 1):
        summary += f"{i}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
    
    total_exercises = len(TRAINING_PROGRAMS[day]['exercises'])
    completed_count = len(current_session['exercises'])
    summary += f"\nüí™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_exercises} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"
    summary += f"\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 1-2 –¥–Ω—è."
    
    keyboard = [
        ["/train", "/progress"],
        ["/stats", "/help"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if update.callback_query:
        update.callback_query.message.reply_text(
            summary,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            summary,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

def view_progress(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /progress - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        update.message.reply_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: /train"
        )
        return
    
    history = user_data[user_id]['history']
    
    response = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    for i, session in enumerate(history[-5:], 1):
        session_date = datetime.fromisoformat(session['start_time']).strftime('%d.%m.%Y')
        response += f"<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {i} ({session['day']}) - {session_date}:</b>\n"
        
        for j, exercise in enumerate(session['exercises'][:3], 1):
            response += f"  {j}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
        
        if len(session['exercises']) > 3:
            response += f"  ... –∏ –µ—â—ë {len(session['exercises']) - 3} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        
        response += "\n"
    
    response += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(history)}"
    
    update.message.reply_text(response, parse_mode='HTML')

def view_stats(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        update.message.reply_text(
            "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: /train"
        )
        return
    
    history = user_data[user_id]['history']
    
    stats_text = "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    stats_text += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{len(history)}</b>\n"
    
    # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
    day_a_count = sum(1 for session in history if session['day'] == '–î–µ–Ω—å –ê')
    day_b_count = sum(1 for session in history if session['day'] == '–î–µ–Ω—å –ë')
    
    stats_text += f"–î–µ–Ω—å –ê: <b>{day_a_count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    stats_text += f"–î–µ–Ω—å –ë: <b>{day_b_count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
    
    if len(history) >= 2:
        stats_text += "üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n"
            
    stats_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    
    update.message.reply_text(stats_text, parse_mode='HTML')

def help_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/train - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</b> –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ üéØ <b>–°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫</b> - –≤—ã–±–∏—Ä–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ ‚è≠Ô∏è <b>–ü—Ä–æ–ø—É—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</b> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
‚Ä¢ üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º</b> - –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:</b>
1. –ù–∞–∂–º–∏—Ç–µ /train
2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
4. –í—ã–±–∏—Ä–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ
5. –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>
6. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ

<b>–û –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>
‚Ä¢ <b>–î–µ–Ω—å –ê</b>: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∏–º—ã + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏
‚Ä¢ <b>–î–µ–Ω—å –ë</b>: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∏–º—ã + –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ß–µ—Ä–µ–¥—É–π—Ç–µ –¥–Ω–∏ –ø–æ —Å—Ö–µ–º–µ:
–ù–µ–¥–µ–ª—è 1: –ê-–ë-–ê, –ù–µ–¥–µ–ª—è 2: –ë-–ê-–ë
    """
    update.message.reply_text(help_text, parse_mode='HTML')

def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in user_data and 'current_session' in user_data[user_id]:
        del user_data[user_id]['current_session']
        save_user_data(user_data)
    
    update.message.reply_text(
        "‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and update.effective_message:
        update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start"
        )

  def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway")
        return
    
    # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å Railway")
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()