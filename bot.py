import logging
import json
import os
import signal
import sys
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, 
    CommandHandler, 
    MessageHandler, 
    Filters, 
    CallbackContext, 
    ConversationHandler,
    CallbackQueryHandler
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
updater = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    print(f"üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...")
    
    global updater
    if updater is not None:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
        updater.stop()
        print("‚úÖ Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)  # –î–ª—è Railway
signal.signal(signal.SIGINT, signal_handler)   # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Ctrl+C

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

TRAINING_PROGRAMS = {
    "–î–µ–Ω—å –ê": {
        "description": "üèãÔ∏è –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∂–∏–º—ã –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏",
        "exercises": [
            "–ñ–∏–º –Ω–æ–≥–∞–º–∏ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (4x8-12)",
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º (3x–¥–æ –æ—Ç–∫–∞–∑–∞)",
            "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∫–∞–º—å–µ (4x6-10)", 
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è (3x8-12)",
            "–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å (3x10-12)",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –Ω–∞ –±–ª–æ–∫–µ (–∫–∞–Ω–∞—Ç) (3x12-15)",
            "–ü–æ–¥—ä–µ–º –Ω–æ–≥ –≤ –≤–∏—Å–µ (3x12-15)"
        ]
    },
    "–î–µ–Ω—å –ë": {
        "description": "üí™ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∂–∏–º—ã –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç—è–≥–∏", 
        "exercises": [
            "–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ —Å–æ —à—Ç–∞–Ω–≥–æ–π (4x10-12)",
            "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ (4x8-12)",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ (30¬∞) (4x10-12)",
            "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º (3x10-15)",
            "–ü–æ–¥—ä–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å —Å–∏–¥—è (3x10-12)",
            "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º –ª–µ–∂–∞ (EZ-–≥—Ä–∏—Ñ) (3x10-12)",
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Ä–∏–º—Å–∫–æ–º —Å—Ç—É–ª–µ (3x15-20)"
        ]
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_DAY, CHOOSING_EXERCISE, ENTERING_EXERCISE_DATA, WEIGHING = range(4)
DATA_FILE = 'user_data.json'

# ========== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ==========
def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, Exception) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_weight_history(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    if user_id not in user_data:
        return []
    return user_data[user_id].get('weight_history', [])

def save_weight(user_id, weight):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    if user_id not in user_data:
        user_data[user_id] = {'username': '', 'history': [], 'weight_history': []}
    
    weight_record = {
        'weight': weight,
        'date': datetime.now().isoformat(),
        'timestamp': datetime.now().strftime('%d.%m.%Y %H:%M')
    }
    
    user_data[user_id]['weight_history'].append(weight_record)
    save_user_data(user_data)
    return weight_record

def format_weight_history(weight_history):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not weight_history:
        return "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π –ø—É—Å—Ç–∞"
    
    lines = []
    for i, record in enumerate(weight_history[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        lines.append(f"{i}. {record['timestamp']}: {record['weight']}–∫–≥")
    
    return "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π:\n" + "\n".join(lines)

def get_weight_progress(weight_history):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞"""
    if len(weight_history) < 2:
        return "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    
    current = weight_history[-1]['weight']
    previous = weight_history[-2]['weight']
    difference = current - previous
    
    if difference > 0:
        return f"üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã: +{difference:.1f}–∫–≥"
    elif difference < 0:
        return f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞: {difference:.1f}–∫–≥"
    else:
        return "‚öñÔ∏è –í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω"

# ========== –§–£–ù–ö–¶–ò–ò –¢–ê–ô–ú–ï–†–ê ==========
def timer_callback(context: CallbackContext):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
    job = context.job
    chat_id = job.context['chat_id']
    timer_name = job.context['timer_name']
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        context.bot.send_message(
            chat_id=chat_id,
            text=f"üéØ {timer_name} –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥! üí™"
        )
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")

def start_timer_progress(context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–∞–π–º–µ—Ä–∞"""
    job = context.job
    chat_id = job.context['chat_id']
    timer_name = job.context['timer_name']
    remaining = job.context['remaining']
    message_id = job.context.get('message_id')
    
    if remaining <= 0:
        # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω - —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        return
    
    try:
        if message_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚è∞ –¢–∞–π–º–µ—Ä {timer_name}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫."
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = context.bot.send_message(
                chat_id=chat_id,
                text=f"‚è∞ –¢–∞–π–º–µ—Ä {timer_name}\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫."
            )
            job.context['message_id'] = message.message_id
        
        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        job.context['remaining'] = remaining - 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")

def set_timer(update: Update, context: CallbackContext, duration: int, timer_name: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ job queue"""
    chat_id = update.effective_message.chat_id
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    timer_job_context = {
        'chat_id': chat_id,
        'timer_name': timer_name
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–∞–π–º–µ—Ä–∞
    progress_job_context = {
        'chat_id': chat_id,
        'timer_name': timer_name,
        'remaining': duration
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–∞–π–º–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
    progress_job = context.job_queue.run_repeating(
        start_timer_progress,
        interval=1,
        first=0,
        context=progress_job_context,
        name=f"timer_progress_{chat_id}"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    context.job_queue.run_once(
        timer_callback,
        duration,
        context=timer_job_context,
        name=f"timer_end_{chat_id}"
    )
    
    # –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–∞–π–º–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    context.job_queue.run_once(
        lambda ctx: progress_job.schedule_removal(),
        duration,
        context={},
        name=f"timer_cleanup_{chat_id}"
    )
    
    print(f"‚úÖ –¢–∞–π–º–µ—Ä {timer_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    return f"‚è∞ –¢–∞–π–º–µ—Ä {timer_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥"

# ========== –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô ==========
def get_exercise_history(user_id, exercise_name, limit=3):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        return []
    
    history = user_data[user_id]['history']
    exercise_history = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    for session in reversed(history):
        for exercise in session.get('exercises', []):
            if exercise['name'] == exercise_name:
                session_date = datetime.fromisoformat(session['start_time']).strftime('%d.%m.%Y')
                exercise_history.append({
                    'date': session_date,
                    'weight': exercise['weight'],
                    'reps': exercise['reps'],
                    'day': session['day']
                })
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∫–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                if limit and len(exercise_history) >= limit:
                    return exercise_history
    
    return exercise_history

def get_full_exercise_history(user_id, exercise_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return get_exercise_history(user_id, exercise_name, limit=None)

def format_exercise_history(history):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not history:
        return "üìù –†–∞–Ω–µ–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å"
    
    lines = []
    for i, record in enumerate(history, 1):
        lines.append(f"{i}. {record['date']} ({record['day']}): {record['weight']}–∫–≥ √ó {record['reps']}–ø–æ–≤—Ç.")
    
    return "\n".join(lines)

def create_simple_ascii_chart(history):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π ASCII-–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if not history or len(history) < 2:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –∑–∞–ø–∏—Å–µ–π
    recent_history = history[:8]
    weights = [h['weight'] for h in recent_history]
    
    min_weight = min(weights)
    max_weight = max(weights)
    
    if min_weight == max_weight:
        return "üìä –í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω: {}–∫–≥".format(weights[0])
    
    chart_lines = []
    for weight in reversed(weights):
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ 20 —Å–∏–º–≤–æ–ª–∞—Ö
        normalized = int((weight - min_weight) / (max_weight - min_weight) * 15)
        bar = "‚ñà" * (normalized + 1)
        chart_lines.append(f"{weight:4}–∫–≥ |{bar}")
    
    return "üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n" + "\n".join(chart_lines)

def generate_smart_recommendations(user_id, exercise_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    history = get_full_exercise_history(user_id, exercise_name)
    if not history or len(history) < 3:
        return "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    
    current = history[0]
    previous = history[1] if len(history) > 1 else None
    two_back = history[2] if len(history) > 2 else None
    
    recommendations = []
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–µ—Å–∞
    if previous and two_back:
        weight_trend = current['weight'] - two_back['weight']
        reps_trend = current['reps'] - two_back['reps']
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Å—É
        if weight_trend == 0 and current['reps'] >= 10:
            recommendations.append("üéØ –ü–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å –Ω–∞ 2.5-5 –∫–≥")
        elif weight_trend > 0:
            recommendations.append(f"üöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! +{weight_trend}–∫–≥ –∑–∞ 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        elif weight_trend < 0:
            recommendations.append("üí™ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–µ—Å—É –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Ç–µ—Ö–Ω–∏–∫–æ–π")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º
        if reps_trend >= 3:
            recommendations.append("üî• –û—Ç–ª–∏—á–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Å")
        elif reps_trend <= -3:
            recommendations.append("üìâ –£–ø–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    recent_weights = [h['weight'] for h in history[:3]]
    if len(set(recent_weights)) == 1:  # –í—Å–µ –≤–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        avg_reps = sum([h['reps'] for h in history[:3]]) / 3
        if avg_reps >= 12:
            recommendations.append("‚ö° –í—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–µ–ª–∞–µ—Ç–µ 12+ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - –ø–æ—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –≤–µ—Å!")
        elif avg_reps <= 8:
            recommendations.append("üìä –ú–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Å –Ω–∞ 5-10%")
    
    # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if len(history) >= 4:
        dates = [datetime.strptime(h['date'], '%d.%m.%Y') for h in history[:4]]
        date_diffs = [(dates[i] - dates[i+1]).days for i in range(len(dates)-1)]
        avg_frequency = sum(date_diffs) / len(date_diffs)
        
        if avg_frequency > 7:
            recommendations.append("üìÖ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å —á–∞—â–µ (2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é) –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        elif avg_frequency < 2:
            recommendations.append("üõå –î–∞–≤–∞–π—Ç–µ –º—ã—à—Ü–∞–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (2-3 –¥–Ω—è –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏)")
    
    if not recommendations:
        recommendations.append("üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–±–∏–ª–µ–Ω")
    
    return "\n".join(recommendations)

def check_workout_reminders(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        return "üí° –ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /train"
    
    history = user_data[user_id]['history']
    if not history:
        return "üí° –ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /train"
    
    last_workout = history[-1]
    last_date = datetime.fromisoformat(last_workout['start_time'])
    days_since_last = (datetime.now() - last_date).days
    
    reminders = []
    
    if days_since_last >= 3:
        reminders.append(f"üïê –ü—Ä–æ—à–ª–æ {days_since_last} –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    
    if days_since_last >= 7:
        reminders.append("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_data = {}
    for session in history[-3:]:
        for exercise in session.get('exercises', []):
            name = exercise['name']
            if name not in progress_data:
                progress_data[name] = []
            progress_data[name].append(exercise)
    
    for exercise_name, exercises in progress_data.items():
        if len(exercises) >= 2:
            last = exercises[0]
            prev = exercises[1]
            if last['weight'] == prev['weight'] and last['reps'] >= 10:
                reminders.append(f"üéØ {exercise_name}: –≥–æ—Ç–æ–≤—ã –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –≤–µ—Å–∞!")
    
    if reminders:
        return "üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(reminders)
    
    return None

def get_detailed_exercise_stats(user_id, exercise_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    history = get_full_exercise_history(user_id, exercise_name)
    if not history:
        return None
    
    weights = [h['weight'] for h in history]
    reps = [h['reps'] for h in history]
    
    stats = {
        'total_workouts': len(history),
        'current_weight': weights[0],
        'current_reps': reps[0],
        'best_weight': max(weights),
        'best_reps': max(reps),
        'avg_weight': sum(weights) / len(weights),
        'avg_reps': sum(reps) / len(reps),
        'weight_progress': weights[0] - weights[-1],
        'reps_progress': reps[0] - reps[-1],
        'consistency': len(set(weights)) / len(weights)  # 1 = –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–∞–±–∏–ª—å–Ω–æ
    }
    
    return stats

def format_detailed_stats(stats, exercise_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not stats:
        return f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é: {exercise_name}"
    
    return f"""
üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {exercise_name}</b>

üìÖ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{stats['total_workouts']}</b>
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: <b>{stats['current_weight']}–∫–≥ √ó {stats['current_reps']}–ø–æ–≤—Ç.</b>

üèÜ –†–µ–∫–æ—Ä–¥—ã:
‚Ä¢ –ú–∞–∫—Å. –≤–µ—Å: <b>{stats['best_weight']}–∫–≥</b>
‚Ä¢ –ú–∞–∫—Å. –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <b>{stats['best_reps']}–ø–æ–≤—Ç.</b>

üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –í–µ—Å: <b>{stats['avg_weight']:.1f}–∫–≥</b>
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <b>{stats['avg_reps']:.1f}–ø–æ–≤—Ç.</b>

üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –Ω–∞—á–∞–ª–∞:
‚Ä¢ –í–µ—Å: <b>{stats['weight_progress']:+.1f}–∫–≥</b>
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <b>{stats['reps_progress']:+.1f}–ø–æ–≤—Ç.</b>

üéØ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: <b>{stats['consistency']*100:.0f}%</b>
"""

def get_progress_comparison(current_weight, current_reps, previous_history):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏"""
    if not previous_history:
        return "üéâ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!"
    
    last_record = previous_history[0]
    last_weight = last_record['weight']
    last_reps = last_record['reps']
    
    if current_weight > last_weight:
        return f"üöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å! +{current_weight - last_weight}–∫–≥ –∫ –≤–µ—Å—É"
    elif current_reps > last_reps:
        return f"üí™ –ü—Ä–æ–≥—Ä–µ—Å—Å! +{current_reps - last_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
    elif current_weight == last_weight and current_reps == last_reps:
        return "‚öñÔ∏è –¢–∞–∫–æ–π –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑"
    else:
        return "üìâ –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ!"

# ========== –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê ==========
def get_exercise_keyboard(day, completed_exercises, user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    exercises = TRAINING_PROGRAMS[day]['exercises']
    keyboard = []
    
    for i, exercise in enumerate(exercises):
        status = "‚úÖ" if i in completed_exercises else "‚óªÔ∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        hint = ""
        if user_id:
            history = get_exercise_history(user_id, exercise, limit=1)
            if history:
                last_record = history[0]
                hint = f" ({last_record['weight']}–∫–≥√ó{last_record['reps']})"
        
        keyboard.append([InlineKeyboardButton(
            f"{status} {i+1}. {exercise.split(' (')[0]}{hint}", 
            callback_data=f"ex_{i}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="reminders")
    ])
    keyboard.append([
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")
    ])
    
    return InlineKeyboardMarkup(keyboard)

def get_exercise_detail_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–∫–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚è± 1.5 –º–∏–Ω", callback_data="timer_90"),
            InlineKeyboardButton("‚è± 3 –º–∏–Ω", callback_data="timer_180")
        ],
        [
            InlineKeyboardButton("‚è± 2 –º–∏–Ω", callback_data="timer_120"),
            InlineKeyboardButton("‚è± 5 –º–∏–Ω", callback_data="timer_300")
        ],
        [
            InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="progress"),
            InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="reminders")
        ],
        [
            InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="back_to_exercises"),
            InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ==========
def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user = update.effective_user
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∫–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!

<b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ ‚è± <b>–¢–∞–π–º–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞</b> - 1.5, 3 –º–∏–Ω—É—Ç—ã –∏ –¥—Ä—É–≥–∏–µ
‚Ä¢ ‚öñÔ∏è <b>–¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞</b> - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞
‚Ä¢ üìä <b>–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b> - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ üéØ <b>–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/train - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
/weight - –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å
/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    """
    update.message.reply_text(welcome_text, parse_mode='HTML')

def start_training_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /train - –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    return choose_training_day(update, context)

def choose_training_day(update: Update, context: CallbackContext):
    """–í—ã–±–æ—Ä –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = [["–î–µ–Ω—å –ê", "–î–µ–Ω—å –ë"], ["/cancel"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    programs_info = "üìã <b>–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n\n"
    for day, program in TRAINING_PROGRAMS.items():
        programs_info += f"<b>{day}</b>\n{program['description']}\n<i>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(program['exercises'])}</i>\n\n"
    
    programs_info += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:"
    update.message.reply_text(programs_info, parse_mode='HTML', reply_markup=reply_markup)
    return CHOOSING_DAY

def show_exercise_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""
    if update.message:
        day = update.message.text
    else:
        day = context.user_data.get('current_day')
    
    user_id = str(update.effective_user.id)
    
    if day not in TRAINING_PROGRAMS:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", reply_markup=ReplyKeyboardRemove())
        return choose_training_day(update, context)
    
    user_data = load_user_data()
    if user_id not in user_data:
        user_data[user_id] = {'username': update.effective_user.first_name, 'history': [], 'weight_history': []}
    
    context.user_data['current_day'] = day
    user_data[user_id]['current_session'] = {'day': day, 'exercises': [], 'start_time': datetime.now().isoformat()}
    save_user_data(user_data)
    
    program = TRAINING_PROGRAMS[day]
    exercises = program['exercises']
    exercises_list = "üìù <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>\n\n"
    for i, exercise in enumerate(exercises, 1):
        exercises_list += f"{i}. {exercise}\n"
    
    exercises_list += f"\n–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    
    completed_exercises = user_data[user_id]['current_session'].get('completed_exercises', [])
    reply_markup = get_exercise_keyboard(day, completed_exercises, user_id)
    
    if update.message:
        update.message.reply_text(exercises_list, parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
        update.message.reply_text("üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>", parse_mode='HTML', reply_markup=reply_markup)
    else:
        update.callback_query.edit_message_text("üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>", parse_mode='HTML', reply_markup=reply_markup)
    
    return CHOOSING_EXERCISE

def handle_exercise_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ"""
    query = update.callback_query
    query.answer()
    
    user_id = str(update.effective_user.id)
    data = query.data
    
    if data == "progress":
        return show_current_progress(update, context)
    elif data == "finish":
        return finish_training_session(update, context)
    elif data == "reminders":
        return show_reminders(update, context)
    elif data == "stats":
        return show_detailed_statistics_menu(update, context)
    elif data.startswith("timer_"):
        return handle_timer_selection(update, context)
    elif data == "back_to_exercises":
        return show_exercise_list_after_input(update, context)
    elif data.startswith("ex_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_index = int(data.split("_")[1])
        context.user_data['current_exercise'] = exercise_index
        
        day = context.user_data.get('current_day')
        exercises = TRAINING_PROGRAMS[day]['exercises']
        exercise_name = exercises[exercise_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_history = get_exercise_history(user_id, exercise_name)
        history_text = format_exercise_history(exercise_history)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = generate_smart_recommendations(user_id, exercise_name)
        
        # –ü–æ–ª—É—á–∞–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫
        full_history = get_full_exercise_history(user_id, exercise_name)
        ascii_chart = create_simple_ascii_chart(full_history)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
        message_text = (
            f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
            f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{history_text}\n\n"
            f"{ascii_chart}\n\n"
            f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}\n\n"
        )
        
        message_text += (
            f"<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n"
            f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
            f"<b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞:</b>"
        )
        
        reply_markup = get_exercise_detail_keyboard()
        
        query.edit_message_text(
            message_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
        return ENTERING_EXERCISE_DATA

def handle_timer_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–µ—Ä–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ —Ç–æ –∂–µ –æ–∫–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    
    if data.startswith("timer_"):
        duration = int(data.split("_")[1])
        
        if duration == 90:
            timer_name = "1.5 –º–∏–Ω—É—Ç—ã"
        elif duration == 120:
            timer_name = "2 –º–∏–Ω—É—Ç—ã"
        elif duration == 180:
            timer_name = "3 –º–∏–Ω—É—Ç—ã"
        elif duration == 300:
            timer_name = "5 –º–∏–Ω—É—Ç"
        else:
            timer_name = f"{duration} —Å–µ–∫—É–Ω–¥"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        result = set_timer(update, context, duration, timer_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞
        query.message.reply_text(result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω
        current_message = query.message.text
        if "‚è∞ –¢–∞–π–º–µ—Ä" not in current_message:
            updated_message = current_message + f"\n\n‚è∞ <b>–¢–∞–π–º–µ—Ä {timer_name} –∑–∞–ø—É—â–µ–Ω!</b>"
        else:
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
            lines = current_message.split('\n')
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
            while lines and "‚è∞ –¢–∞–π–º–µ—Ä" in lines[-1]:
                lines.pop()
            updated_message = '\n'.join(lines) + f"\n\n‚è∞ <b>–¢–∞–π–º–µ—Ä {timer_name} –∑–∞–ø—É—â–µ–Ω!</b>"
        
        try:
            query.edit_message_text(
                updated_message,
                parse_mode='HTML',
                reply_markup=query.message.reply_markup
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        return ENTERING_EXERCISE_DATA

def handle_exercise_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ç–æ–º—É –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /train")
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    exercise_index = context.user_data.get('current_exercise')
    exercises_list = TRAINING_PROGRAMS[day]['exercises']
    exercise_name = exercises_list[exercise_index]
    
    try:
        parts = text.split()
        if len(parts) != 2:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞")
        weight = float(parts[0])
        reps = int(parts[1])
        if weight <= 0 or reps <= 0:
            raise ValueError("–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
    except ValueError as e:
        update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}\n\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n–ü—Ä–∏–º–µ—Ä: <code>60 10</code>", parse_mode='HTML')
        return ENTERING_EXERCISE_DATA
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_data = {
        'name': exercise_name,
        'weight': weight,
        'reps': reps,
        'timestamp': datetime.now().isoformat()
    }
    
    existing_index = None
    for i, ex in enumerate(current_session['exercises']):
        if ex['name'] == exercise_name:
            existing_index = i
            break
    
    if existing_index is not None:
        current_session['exercises'][existing_index] = exercise_data
    else:
        current_session['exercises'].append(exercise_data)
    
    if 'completed_exercises' not in current_session:
        current_session['completed_exercises'] = []
    if exercise_index not in current_session['completed_exercises']:
        current_session['completed_exercises'].append(exercise_index)
    
    save_user_data(user_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ exercise_history –Ω–µ None
    exercise_history = get_exercise_history(user_id, exercise_name)
    previous_history = []
    if exercise_history is not None:
        previous_history = [h for h in exercise_history if h['weight'] != weight or h['reps'] != reps]
    progress_text = get_progress_comparison(weight, reps, previous_history)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    day = context.user_data.get('current_day')
    exercises = TRAINING_PROGRAMS[day]['exercises']
    exercise_name = exercises[exercise_index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    exercise_history = get_exercise_history(user_id, exercise_name)
    history_text = format_exercise_history(exercise_history)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = generate_smart_recommendations(user_id, exercise_name)
    
    # –ü–æ–ª—É—á–∞–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫
    full_history = get_full_exercise_history(user_id, exercise_name)
    ascii_chart = create_simple_ascii_chart(full_history)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
        f"‚úÖ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {weight}–∫–≥ √ó {reps}–ø–æ–≤—Ç.\n"
        f"{progress_text}\n\n"
        f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{history_text}\n\n"
        f"{ascii_chart}\n\n"
        f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}\n\n"
    )
    
    message_text += (
        f"<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n"
        f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
        f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
        f"<b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞:</b>"
    )
    
    reply_markup = get_exercise_detail_keyboard()
    
    update.message.reply_text(
        message_text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return ENTERING_EXERCISE_DATA

def skip_exercise(update: Update, context: CallbackContext):
    """–ü—Ä–æ–ø—É—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /train")
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    exercise_index = context.user_data.get('current_exercise')
    exercises_list = TRAINING_PROGRAMS[day]['exercises']
    exercise_name = exercises_list[exercise_index]
    
    update.message.reply_text(f"‚è≠Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {exercise_name}")
    return show_exercise_list_after_input(update, context)

def show_exercise_list_after_input(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    day = context.user_data.get('current_day')
    
    if user_id in user_data and 'current_session' in user_data[user_id]:
        completed_exercises = user_data[user_id]['current_session'].get('completed_exercises', [])
    else:
        completed_exercises = []
    
    reply_markup = get_exercise_keyboard(day, completed_exercises, user_id)
    update.message.reply_text("üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b>", parse_mode='HTML', reply_markup=reply_markup)
    return CHOOSING_EXERCISE

def show_current_progress(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        if update.callback_query:
            update.callback_query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return CHOOSING_EXERCISE
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    progress_text = f"üìä <b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ({day}):</b>\n\n"
    
    if current_session['exercises']:
        for i, exercise in enumerate(current_session['exercises'], 1):
            progress_text += f"{i}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
    else:
        progress_text += "–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n"
    
    total_exercises = len(TRAINING_PROGRAMS[day]['exercises'])
    completed_count = len(current_session['exercises'])
    progress_text += f"\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_exercises}"
    
    if update.callback_query:
        update.callback_query.message.reply_text(progress_text, parse_mode='HTML')
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–æ–º—É –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_index = context.user_data.get('current_exercise')
        if exercise_index is not None:
            day = context.user_data.get('current_day')
            exercises = TRAINING_PROGRAMS[day]['exercises']
            exercise_name = exercises[exercise_index]
            
            user_id = str(update.effective_user.id)
            exercise_history = get_exercise_history(user_id, exercise_name)
            history_text = format_exercise_history(exercise_history)
            recommendations = generate_smart_recommendations(user_id, exercise_name)
            full_history = get_full_exercise_history(user_id, exercise_name)
            ascii_chart = create_simple_ascii_chart(full_history)
            
            message_text = (
                f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
                f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{history_text}\n\n"
                f"{ascii_chart}\n\n"
                f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}\n\n"
                f"<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n"
                f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
                f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
                f"<b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞:</b>"
            )
            
            reply_markup = get_exercise_detail_keyboard()
            update.callback_query.message.reply_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
    
    return ENTERING_EXERCISE_DATA

def show_reminders(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    user_id = str(update.effective_user.id)
    reminders = check_workout_reminders(user_id)
    
    if reminders:
        update.callback_query.message.reply_text(reminders, parse_mode='HTML')
    else:
        update.callback_query.message.reply_text("‚úÖ –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!", parse_mode='HTML')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ç–æ–º—É –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_index = context.user_data.get('current_exercise')
    if exercise_index is not None:
        day = context.user_data.get('current_day')
        exercises = TRAINING_PROGRAMS[day]['exercises']
        exercise_name = exercises[exercise_index]
        
        user_id = str(update.effective_user.id)
        exercise_history = get_exercise_history(user_id, exercise_name)
        history_text = format_exercise_history(exercise_history)
        recommendations = generate_smart_recommendations(user_id, exercise_name)
        full_history = get_full_exercise_history(user_id, exercise_name)
        ascii_chart = create_simple_ascii_chart(full_history)
        
        message_text = (
            f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
            f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{history_text}\n\n"
            f"{ascii_chart}\n\n"
            f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}\n\n"
            f"<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n"
            f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
            f"<b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞:</b>"
        )
        
        reply_markup = get_exercise_detail_keyboard()
        update.callback_query.message.reply_text(message_text, parse_mode='HTML', reply_markup=reply_markup)
    
    return ENTERING_EXERCISE_DATA

def show_detailed_statistics_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = str(update.effective_user.id)
    day = context.user_data.get('current_day')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    exercises = TRAINING_PROGRAMS[day]['exercises']
    keyboard = []
    
    for i, exercise in enumerate(exercises):
        keyboard.append([InlineKeyboardButton(
            f"{i+1}. {exercise}", 
            callback_data=f"stat_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_exercises")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.callback_query.message.reply_text(
        "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

def show_exercise_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    query = update.callback_query
    query.answer()
    
    user_id = str(update.effective_user.id)
    data = query.data
    
    if data == "back_to_exercises":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercise_index = context.user_data.get('current_exercise')
        if exercise_index is not None:
            day = context.user_data.get('current_day')
            exercises = TRAINING_PROGRAMS[day]['exercises']
            exercise_name = exercises[exercise_index]
            
            exercise_history = get_exercise_history(user_id, exercise_name)
            history_text = format_exercise_history(exercise_history)
            recommendations = generate_smart_recommendations(user_id, exercise_name)
            full_history = get_full_exercise_history(user_id, exercise_name)
            ascii_chart = create_simple_ascii_chart(full_history)
            
            message_text = (
                f"üí™ <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> {exercise_name}\n\n"
                f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{history_text}\n\n"
                f"{ascii_chart}\n\n"
                f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}\n\n"
                f"<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>\n"
                f"<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</code>\n"
                f"–ü—Ä–∏–º–µ—Ä: <code>60 10</code>\n\n"
                f"<b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞:</b>"
            )
            
            reply_markup = get_exercise_detail_keyboard()
            query.edit_message_text(
                message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        return ENTERING_EXERCISE_DATA
    
    if data.startswith("stat_"):
        exercise_index = int(data.split("_")[1])
        day = context.user_data.get('current_day')
        exercises = TRAINING_PROGRAMS[day]['exercises']
        exercise_name = exercises[exercise_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_detailed_exercise_stats(user_id, exercise_name)
        stats_text = format_detailed_stats(stats, exercise_name)
        
        # –ü–æ–ª—É—á–∞–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫
        full_history = get_full_exercise_history(user_id, exercise_name)
        ascii_chart = create_simple_ascii_chart(full_history)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = generate_smart_recommendations(user_id, exercise_name)
        
        full_message = f"{stats_text}\n\n{ascii_chart}\n\nüéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{recommendations}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="stats")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            full_message,
            parse_mode='HTML',
            reply_markup=reply_markup
        )

def finish_training_session(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–∑–≤–µ—Å–∏—Ç—å—Å—è"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or 'current_session' not in user_data[user_id]:
        if update.callback_query:
            update.callback_query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    current_session = user_data[user_id]['current_session']
    day = current_session['day']
    
    if not current_session['exercises']:
        if update.callback_query:
            update.callback_query.message.reply_text("‚ùå –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        del user_data[user_id]['current_session']
        save_user_data(user_data)
        return ConversationHandler.END
    
    user_data[user_id]['history'].append(current_session)
    del user_data[user_id]['current_session']
    save_user_data(user_data)
    
    summary = "üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n<b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
    for i, exercise in enumerate(current_session['exercises'], 1):
        summary += f"{i}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
    
    total_exercises = len(TRAINING_PROGRAMS[day]['exercises'])
    completed_count = len(current_session['exercises'])
    summary += f"\nüí™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}/{total_exercises} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∑–≤–µ—Å–∏—Ç—å—Å—è
    weight_history = get_weight_history(user_id)
    if weight_history:
        last_weight = weight_history[-1]['weight']
        summary += f"‚öñÔ∏è –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: {last_weight}–∫–≥\n"
    
    summary += "\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å?\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    
    if update.callback_query:
        update.callback_query.message.reply_text(summary, parse_mode='HTML')
    else:
        update.message.reply_text(summary, parse_mode='HTML')
    
    return WEIGHING

def handle_weight_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    user_id = str(update.effective_user.id)
    text = update.message.text.strip()
    
    try:
        weight = float(text)
        if weight <= 0 or weight > 300:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
    except ValueError:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)")
        return WEIGHING
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
    weight_record = save_weight(user_id, weight)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    weight_history = get_weight_history(user_id)
    progress_text = get_weight_progress(weight_history)
    
    response = (
        f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {weight}–∫–≥\n"
        f"{progress_text}\n\n"
        f"{format_weight_history(weight_history)}"
    )
    
    update.message.reply_text(response)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    keyboard = [["/train", "/progress"], ["/stats", "/help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=reply_markup)
    
    return ConversationHandler.END

def skip_weight(update: Update, context: CallbackContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è"""
    update.message.reply_text("‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    keyboard = [["/train", "/progress"], ["/stats", "/help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=reply_markup)
    
    return ConversationHandler.END

def weight_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /weight - –∑–∞–ø–∏—Å—å –≤–µ—Å–∞ –≤–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user_id = str(update.effective_user.id)
    weight_history = get_weight_history(user_id)
    
    if weight_history:
        last_weight = weight_history[-1]['weight']
        update.message.reply_text(
            f"‚öñÔ∏è –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: {last_weight}–∫–≥\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
            parse_mode='HTML'
        )
    else:
        update.message.reply_text(
            "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
            parse_mode='HTML'
        )
    
    return WEIGHING

def view_progress(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /progress - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –≤–µ—Å–∞"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: /train")
        return
    
    history = user_data[user_id]['history']
    response = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n\n"
    
    for i, session in enumerate(history[-5:], 1):
        session_date = datetime.fromisoformat(session['start_time']).strftime('%d.%m.%Y')
        response += f"<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {i} ({session['day']}) - {session_date}:</b>\n"
        for j, exercise in enumerate(session['exercises'][:3], 1):
            response += f"  {j}. {exercise['name']}: {exercise['weight']}–∫–≥ √ó {exercise['reps']}–ø–æ–≤—Ç.\n"
        if len(session['exercises']) > 3:
            response += f"  ... –∏ –µ—â—ë {len(session['exercises']) - 3} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        response += "\n"
    
    response += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(history)}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞
    weight_history = get_weight_history(user_id)
    if weight_history:
        response += format_weight_history(weight_history)
        response += f"\n\n{get_weight_progress(weight_history)}"
    
    update.message.reply_text(response, parse_mode='HTML')

def view_stats(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id].get('history'):
        update.message.reply_text("üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: /train")
        return
    
    history = user_data[user_id]['history']
    stats_text = "üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    stats_text += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: <b>{len(history)}</b>\n"
    
    day_a_count = sum(1 for session in history if session['day'] == '–î–µ–Ω—å –ê')
    day_b_count = sum(1 for session in history if session['day'] == '–î–µ–Ω—å –ë')
    stats_text += f"–î–µ–Ω—å –ê: <b>{day_a_count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    stats_text += f"–î–µ–Ω—å –ë: <b>{day_b_count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Å–∞
    weight_history = get_weight_history(user_id)
    if weight_history:
        current_weight = weight_history[-1]['weight']
        stats_text += f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: <b>{current_weight}–∫–≥</b>\n"
        if len(weight_history) > 1:
            first_weight = weight_history[0]['weight']
            difference = current_weight - first_weight
            if difference > 0:
                stats_text += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: <b>+{difference:.1f}–∫–≥</b>\n"
            elif difference < 0:
                stats_text += f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: <b>{difference:.1f}–∫–≥</b>\n"
            else:
                stats_text += f"‚öñÔ∏è –í–µ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è\n"
    
    if len(history) >= 2:
        stats_text += "üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n"
    stats_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    update.message.reply_text(stats_text, parse_mode='HTML')

def help_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/train - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –≤–µ—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
/weight - –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ ‚è± <b>–¢–∞–π–º–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞</b> - 1.5, 2, 3, 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏
‚Ä¢ ‚öñÔ∏è <b>–¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∑–≤–µ—Å–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ üìä <b>–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b> - ASCII-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ üéØ <b>–£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b> - AI-—Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:</b>
1. –ù–∞–∂–º–∏—Ç–µ /train
2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
3. –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
4. –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞
5. –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å
6. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ /progress

<b>–¢–∞–π–º–µ—Ä—ã –æ—Ç–¥—ã—Ö–∞:</b>
‚Ä¢ ‚è± 1.5 –º–∏–Ω - –¥–ª—è —Å—É–ø–µ—Ä—Å–µ—Ç–æ–≤ –∏ –ª–µ–≥–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ ‚è± 3 –º–∏–Ω - –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ —Ç—è–∂–µ–ª—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
‚Ä¢ ‚è± 5 –º–∏–Ω - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ß–µ—Ä–µ–¥—É–π—Ç–µ –¥–Ω–∏ –ø–æ —Å—Ö–µ–º–µ:
–ù–µ–¥–µ–ª—è 1: –ê-–ë-–ê, –ù–µ–¥–µ–ª—è 2: –ë-–ê-–ë
    """
    update.message.reply_text(help_text, parse_mode='HTML')

def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id in user_data and 'current_session' in user_data[user_id]:
        del user_data[user_id]['current_session']
        save_user_data(user_data)
    
    update.message.reply_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if update and update.effective_message:
        update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global updater
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Railway...")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å Railway")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not BOT_TOKEN:
        print("‚ùå –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–µ–∑ BOT_TOKEN")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º updater —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        updater = Updater(
            BOT_TOKEN, 
            use_context=True,
            request_kwargs={
                'read_timeout': 10, 
                'connect_timeout': 10
            }
        )
        dispatcher = updater.dispatcher
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('train', start_training_command),
                CommandHandler('weight', weight_command)
            ],
            states={
                CHOOSING_DAY: [MessageHandler(Filters.regex('^(–î–µ–Ω—å –ê|–î–µ–Ω—å –ë)$'), show_exercise_list)],
                CHOOSING_EXERCISE: [
                    CallbackQueryHandler(handle_exercise_selection, pattern='^(ex_|progress|finish|reminders|stats|timer_|back_to_exercises)'),
                    CallbackQueryHandler(show_exercise_statistics, pattern='^(stat_)')
                ],
                ENTERING_EXERCISE_DATA: [
                    MessageHandler(Filters.text & ~Filters.command, handle_exercise_input),
                    CommandHandler('skip', skip_exercise),
                    CallbackQueryHandler(handle_exercise_selection, pattern='^(progress|finish|reminders|stats|timer_|back_to_exercises)')
                ],
                WEIGHING: [
                    MessageHandler(Filters.text & ~Filters.command, handle_weight_input),
                    CommandHandler('skip', skip_weight)
                ]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_chat=True,
            per_user=True,
            per_message=False
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("progress", view_progress))
        dispatcher.add_handler(CommandHandler("stats", view_stats))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("cancel", cancel))
        dispatcher.add_handler(conv_handler)
        dispatcher.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Railway
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        updater.start_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            timeout=20,
            allowed_updates=['message', 'callback_query']
        )
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
